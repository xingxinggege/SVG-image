{
  "name": "html中的svg图像处理",
  "tagline": "html中的svg图像处理",
  "body": "### HTML中 SVG 图像图像处理.\r\nSVG是“可缩放矢量图”（Scalable Vector Graphics）的缩写，是一种描述向量图形的XML格式的标记化语言。也就是说，SVG本质上是文本文件，格式采用XML，可以在浏览器中显示出矢量图像。由于结构是XML格式，使得它可以插入HTML文档，成为DOM的一部分，然后用JavaScript和CSS进行操作。\r\n相比传统的图像文件格式（比如JPG和PNG），SVG图像的优势就是文件体积小，并且放大多少倍都不会失真，因此非常合适用于网页。\r\n\r\nSVG图像可以用Adobe公司的Illustrator软件、开源软件Inkscape等生成。目前，所有主流浏览器都支持，对于低于IE 9的浏览器，可以使用第三方的polyfills函数库。\r\n\r\n## 插入SVG文件\r\nSVG插入网页的方法有多种，可以用在img、object、embed、iframe等标签，以及CSS的background-image属性。\r\n\r\n```\r\n<img src=\"circle.svg\">\r\n<object id=\"object\" data=\"circle.svg\" type=\"image/svg+xml\"></object>\r\n<embed id=\"embed\" src=\"icon.svg\" type=\"image/svg+xml\">\r\n<iframe id=\"iframe\" src=\"icon.svg\"></iframe>\r\n```\r\n上面是四种在网页中插入SVG图像的方式。\r\n\r\n此外，SVG文件还可以插入其他DOM元素，比如div元素，请看下面的例子（使用了jQuery函数库）。\r\n```\r\n<div id=\"stage\"></div>\r\n\r\n<script>\r\n$(\"#stage\").load('icon.svg',function(response){\r\n  $(this).addClass(\"svgLoaded\");\r\n  if(!response){\r\n    // 加载失败的处理代码\r\n  }\r\n});\r\n</script>\r\n```\r\n## svg格式\r\n\r\nSVG文件采用XML格式，就是普通的文本文件。\r\n\r\n```\r\n<svg width=\"300\" height=\"180\">\r\n  <circle cx=\"30\"  cy=\"50\" r=\"25\" />\r\n  <circle cx=\"90\"  cy=\"50\" r=\"25\" class=\"red\" />\r\n  <circle cx=\"150\" cy=\"50\" r=\"25\" class=\"fancy\" />\r\n</svg>\r\n```\r\n上面的svg文件，定义了三个圆，它们的cx、cy、r属性分别为x坐标、y坐标和半径。利用class属性，可以为这些圆指定样式。\r\n\r\n```\r\n.red {\r\n  fill: red; /* not background-color! */\r\n}\r\n\r\n.fancy {\r\n  fill: none;\r\n  stroke: black; /* similar to border-color */\r\n  stroke-width: 3pt; /* similar to border-width */\r\n}\r\n```\r\n上面代码中，fill属性表示填充色，stroke属性表示描边色，stroke-width属性表示边线宽度。\r\n\r\n除了circle标签表示圆，SVG文件还可以使用表示其他形状的标签。\r\n```\r\n<svg>\r\n  <line x1=\"0\" y1=\"0\" x2=\"200\" y2=\"0\" style=\"stroke:rgb(0,0,0);stroke-width:1\"/></line>\r\n  <rect x=\"0\" y=\"0\" height=\"100\" width=\"200\" style=\"stroke: #70d5dd; fill: #dd524b\" />\r\n  <ellipse cx=\"60\" cy=\"60\" ry=\"40\" rx=\"20\" stroke=\"black\" stroke-width=\"5\" fill=\"silver\"/></ellipse>\r\n\t<polygon fill=\"green\" stroke=\"orange\" stroke-width=\"10\" points=\"350, 75  379,161 469,161 397,215 423,301 350,250 277,301 303,215 231,161 321,161\"/><polygon>\r\n\t<path id=\"path1\" d=\"M160.143,196c0,0,62.777-28.033,90-17.143c71.428,28.572,73.952-25.987,84.286-21.428\" style=\"fill:none;stroke:2;\"></path>  \r\n</svg>\r\n```\r\n上面代码中，line、rect、ellipse、polygon和path标签，分别表示线条、矩形、椭圆、多边形和路径。\r\n\r\ng标签用于将多个形状组成一组，表示group。\r\n\r\n```\r\n<svg width=\"300\" height=\"180\">\r\n  <g transform=\"translate(5, 15)\">\r\n    <text x=\"0\" y=\"0\">Howdy!</text>\r\n    <path d=\"M0,50 L50,0 Q100,0 100,50\"\r\n      fill=\"none\" stroke-width=\"3\" stroke=\"black\" />\r\n  </g>\r\n</svg>\r\n```\r\n## SVG文件的JavaScript操作\r\n* 获取SVG DOM\r\n如果使用img标签插入SVG文件，则无法获取SVG DOM。使用object、iframe、embed标签，可以获取SVG DOM。\r\n```\r\nvar svgObject = document.getElementById(\"object\").contentDocument;\r\nvar svgIframe = document.getElementById(\"iframe\").contentDocument;\r\nvar svgEmbed = document.getElementById(\"embed\").getSVGDocument(); \r\n```\r\n由于svg文件就是一般的XML文件，因此可以用DOM方法，选取页面元素。\r\n\r\n```\r\n// 改变填充色\r\ndocument.getElementById(\"theCircle\").style.fill = \"red\";\r\n\r\n// 改变元素属性\r\ndocument.getElementById(\"theCircle\").setAttribute(\"class\", \"changedColors\");\r\n\r\n// 绑定事件回调函数\r\ndocument.getElementById(\"theCircle\").addEventListener(\"click\", function() {\r\n   console.log(\"clicked\")\r\n});\r\n```\r\n* 读取svg源码\r\n由于svg文件就是一个XML代码的文本文件，因此可以通过读取XML代码的方式，读取svg源码。\r\n假定网页中有一个svg元素。\r\n```\r\n<div id=\"svg-container\">\r\n\t<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" width=\"500\" height=\"440\">\r\n\t\t<!-- svg code -->\r\n\t</svg>\r\n</div>\r\n```\r\n使用XMLSerializer实例的serializeToString方法，获取svg元素的代码。\r\n```\r\nvar svgString = new XMLSerializer().serializeToString(document.querySelector('svg'));\r\n```\r\n* 将svg图像转为canvas图像\r\n首先，需要新建一个img对象，将svg图像指定到该img对象的src属性。\r\n```\r\nvar img = new Image();\r\nvar svg = new Blob([svgString], {type: \"image/svg+xml;charset=utf-8\"});\r\n\r\nvar DOMURL = self.URL || self.webkitURL || self;\r\nvar url = DOMURL.createObjectURL(svg);\r\n\r\nimg.src = url;\r\n```\r\n然后，当图像加载完成后，再将它绘制到canvas元素。\r\n```\r\nimg.onload = function() {\r\n\tvar canvas = document.getElementById(\"canvas\");\r\n\tvar ctx = canvas.getContext(\"2d\");\r\n    ctx.drawImage(img, 0, 0);\r\n};\r\n```",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}